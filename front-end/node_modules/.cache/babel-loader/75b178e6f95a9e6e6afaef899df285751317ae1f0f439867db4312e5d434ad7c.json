{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080/api';\n\n// Configuração do axios\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor para adicionar token de autenticação (se necessário no futuro)\napi.interceptors.request.use(config => {\n  const user = JSON.parse(localStorage.getItem('user'));\n  if (user && user.token) {\n    config.headers.Authorization = `Bearer ${user.token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Funções de API\n\n// Autenticação\nexport const login = async (email, senha) => {\n  try {\n    // Verifica se estamos em desenvolvimento e se devemos usar dados simulados\n    if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_USE_MOCK_DATA === 'true') {\n      // Usuários de teste\n      const users = [{\n        id: 1,\n        nome: 'João',\n        sobrenome: 'Silva',\n        email: 'usuario@teste.com',\n        senha: '123456',\n        role: 'USUARIO'\n      }, {\n        id: 2,\n        nome: 'Maria',\n        sobrenome: 'Técnica',\n        email: 'tecnico@teste.com',\n        senha: '123456',\n        role: 'TECNICO',\n        cargo: 'Suporte Técnico'\n      }];\n      const user = users.find(u => u.email === email && u.senha === senha);\n      if (user) {\n        const {\n          senha,\n          ...userData\n        } = user;\n        return userData;\n      }\n      throw new Error('Email ou senha inválidos');\n    }\n\n    // Chamada real à API\n    const response = await api.post('/login', {\n      email,\n      senha\n    });\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      throw new Error(error.response.data.message || 'Erro ao fazer login');\n    }\n    throw error;\n  }\n};\n\n// Chamados\nexport const getChamados = async (usuarioId = null) => {\n  try {\n    // Verifica se estamos em desenvolvimento e se devemos usar dados simulados\n    if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_USE_MOCK_DATA === 'true') {\n      const chamados = [{\n        id: 1,\n        titulo: 'Problema com internet',\n        descricao: 'Não consigo acessar a internet no meu computador.',\n        status: 'ABERTO',\n        dataCriacao: '2023-05-10T14:30:00',\n        dataFinalizacao: null,\n        categoria: 'REDE',\n        usuarioId: 1,\n        usuarioNome: 'João Silva',\n        tecnicoId: null,\n        tecnicoNome: null\n      }, {\n        id: 2,\n        titulo: 'Computador não liga',\n        descricao: 'Meu computador não está ligando desde ontem.',\n        status: 'ABERTO',\n        dataCriacao: '2023-05-11T09:15:00',\n        dataFinalizacao: null,\n        categoria: 'HARDWARE',\n        usuarioId: 1,\n        usuarioNome: 'João Silva',\n        tecnicoId: null,\n        tecnicoNome: null\n      }, {\n        id: 3,\n        titulo: 'Erro no sistema',\n        descricao: 'O sistema apresenta erro ao tentar salvar relatórios.',\n        status: 'FINALIZADO',\n        dataCriacao: '2023-05-09T11:20:00',\n        dataFinalizacao: '2023-05-09T16:45:00',\n        categoria: 'SOFTWARE',\n        usuarioId: 1,\n        usuarioNome: 'João Silva',\n        tecnicoId: 2,\n        tecnicoNome: 'Maria Técnica'\n      }];\n      if (usuarioId) {\n        return chamados.filter(c => c.usuarioId === usuarioId);\n      }\n      return chamados;\n    }\n\n    // Chamada real à API\n    const url = usuarioId ? `/chamadas/usuario/${usuarioId}` : '/chamadas';\n    const response = await api.get(url);\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      throw new Error(error.response.data.message || 'Erro ao buscar chamados');\n    }\n    throw error;\n  }\n};\nexport const criarChamado = async chamadoData => {\n  try {\n    // Verifica se estamos em desenvolvimento e se devemos usar dados simulados\n    if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_USE_MOCK_DATA === 'true') {\n      return {\n        id: Math.floor(Math.random() * 1000) + 4,\n        ...chamadoData,\n        status: 'ABERTO',\n        dataCriacao: new Date().toISOString(),\n        dataFinalizacao: null,\n        tecnicoId: null,\n        tecnicoNome: null\n      };\n    }\n\n    // Chamada real à API\n    const response = await api.post('/chamadas', chamadoData);\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      throw new Error(error.response.data.message || 'Erro ao criar chamado');\n    }\n    throw error;\n  }\n};\nexport const finalizarChamado = async (chamadoCodigo, tecnicoId, tecnicoNome) => {\n  try {\n    // Verifica se estamos em desenvolvimento e se devemos usar dados simulados\n    if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_USE_MOCK_DATA === 'true') {\n      return {\n        id: chamadoCodigo,\n        status: 'FINALIZADO',\n        dataFinalizacao: new Date().toISOString(),\n        tecnicoId,\n        tecnicoNome\n      };\n    }\n\n    // Chamada real à API\n    const response = await api.put(`/chamadas/${chamadoCodigo}/finalizar`, {\n      tecnicoCodigo,\n      tecnicoNome\n    });\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      throw new Error(error.response.data.message || 'Erro ao finalizar chamado');\n    }\n    throw error;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","interceptors","request","use","config","user","JSON","parse","localStorage","getItem","token","Authorization","error","Promise","reject","login","email","senha","process","env","NODE_ENV","REACT_APP_USE_MOCK_DATA","users","id","nome","sobrenome","role","cargo","find","u","userData","Error","response","post","data","message","getChamados","usuarioId","chamados","titulo","descricao","status","dataCriacao","dataFinalizacao","categoria","usuarioNome","tecnicoId","tecnicoNome","filter","c","url","get","criarChamado","chamadoData","Math","floor","random","Date","toISOString","finalizarChamado","chamadoCodigo","put","tecnicoCodigo"],"sources":["C:/Users/arauj/Desktop/projetos/suporte/front-end/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:8080/api';\r\n\r\n// Configuração do axios\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Interceptor para adicionar token de autenticação (se necessário no futuro)\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    if (user && user.token) {\r\n      config.headers.Authorization = `Bearer ${user.token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Funções de API\r\n\r\n// Autenticação\r\nexport const login = async (email, senha) => {\r\n  try {\r\n    // Verifica se estamos em desenvolvimento e se devemos usar dados simulados\r\n    if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_USE_MOCK_DATA === 'true') {\r\n      // Usuários de teste\r\n      const users = [\r\n        { id: 1, nome: 'João', sobrenome: 'Silva', email: 'usuario@teste.com', senha: '123456', role: 'USUARIO' },\r\n        { id: 2, nome: 'Maria', sobrenome: 'Técnica', email: 'tecnico@teste.com', senha: '123456', role: 'TECNICO', cargo: 'Suporte Técnico' }\r\n      ];\r\n      \r\n      const user = users.find(u => u.email === email && u.senha === senha);\r\n      \r\n      if (user) {\r\n        const { senha, ...userData } = user;\r\n        return userData;\r\n      }\r\n      \r\n      throw new Error('Email ou senha inválidos');\r\n    }\r\n    \r\n    // Chamada real à API\r\n    const response = await api.post('/login', { email, senha });\r\n    return response.data;\r\n  } catch (error) {\r\n    if (error.response) {\r\n      throw new Error(error.response.data.message || 'Erro ao fazer login');\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Chamados\r\nexport const getChamados = async (usuarioId = null) => {\r\n  try {\r\n    // Verifica se estamos em desenvolvimento e se devemos usar dados simulados\r\n    if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_USE_MOCK_DATA === 'true') {\r\n      const chamados = [\r\n        {\r\n          id: 1,\r\n          titulo: 'Problema com internet',\r\n          descricao: 'Não consigo acessar a internet no meu computador.',\r\n          status: 'ABERTO',\r\n          dataCriacao: '2023-05-10T14:30:00',\r\n          dataFinalizacao: null,\r\n          categoria: 'REDE',\r\n          usuarioId: 1,\r\n          usuarioNome: 'João Silva',\r\n          tecnicoId: null,\r\n          tecnicoNome: null\r\n        },\r\n        {\r\n          id: 2,\r\n          titulo: 'Computador não liga',\r\n          descricao: 'Meu computador não está ligando desde ontem.',\r\n          status: 'ABERTO',\r\n          dataCriacao: '2023-05-11T09:15:00',\r\n          dataFinalizacao: null,\r\n          categoria: 'HARDWARE',\r\n          usuarioId: 1,\r\n          usuarioNome: 'João Silva',\r\n          tecnicoId: null,\r\n          tecnicoNome: null\r\n        },\r\n        {\r\n          id: 3,\r\n          titulo: 'Erro no sistema',\r\n          descricao: 'O sistema apresenta erro ao tentar salvar relatórios.',\r\n          status: 'FINALIZADO',\r\n          dataCriacao: '2023-05-09T11:20:00',\r\n          dataFinalizacao: '2023-05-09T16:45:00',\r\n          categoria: 'SOFTWARE',\r\n          usuarioId: 1,\r\n          usuarioNome: 'João Silva',\r\n          tecnicoId: 2,\r\n          tecnicoNome: 'Maria Técnica'\r\n        }\r\n      ];\r\n      \r\n      if (usuarioId) {\r\n        return chamados.filter(c => c.usuarioId === usuarioId);\r\n      }\r\n      \r\n      return chamados;\r\n    }\r\n    \r\n    // Chamada real à API\r\n    const url = usuarioId ? `/chamadas/usuario/${usuarioId}` : '/chamadas';\r\n    const response = await api.get(url);\r\n    return response.data;\r\n  } catch (error) {\r\n    if (error.response) {\r\n      throw new Error(error.response.data.message || 'Erro ao buscar chamados');\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const criarChamado = async (chamadoData) => {\r\n  try {\r\n    // Verifica se estamos em desenvolvimento e se devemos usar dados simulados\r\n    if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_USE_MOCK_DATA === 'true') {\r\n      return {\r\n        id: Math.floor(Math.random() * 1000) + 4,\r\n        ...chamadoData,\r\n        status: 'ABERTO',\r\n        dataCriacao: new Date().toISOString(),\r\n        dataFinalizacao: null,\r\n        tecnicoId: null,\r\n        tecnicoNome: null\r\n      };\r\n    }\r\n    \r\n    // Chamada real à API\r\n    const response = await api.post('/chamadas', chamadoData);\r\n    return response.data;\r\n  } catch (error) {\r\n    if (error.response) {\r\n      throw new Error(error.response.data.message || 'Erro ao criar chamado');\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const finalizarChamado = async (chamadoCodigo, tecnicoId, tecnicoNome) => {\r\n  try {\r\n    // Verifica se estamos em desenvolvimento e se devemos usar dados simulados\r\n    if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_USE_MOCK_DATA === 'true') {\r\n      return {\r\n        id: chamadoCodigo,\r\n        status: 'FINALIZADO',\r\n        dataFinalizacao: new Date().toISOString(),\r\n        tecnicoId,\r\n        tecnicoNome\r\n      };\r\n    }\r\n    \r\n    // Chamada real à API\r\n    const response = await api.put(`/chamadas/${chamadoCodigo}/finalizar`, { tecnicoCodigo, tecnicoNome });\r\n    return response.data;\r\n  } catch (error) {\r\n    if (error.response) {\r\n      throw new Error(error.response.data.message || 'Erro ao finalizar chamado');\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}